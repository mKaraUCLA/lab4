def Planning(self, animation=True):
    self.nodeList = [self.start]
while True:
        if random.randint(0, 100) > self.goalSampleRate:
            rnd = [random.uniform(self.minrand, self.maxrand), random.uniform(self.minrand, self.maxrand)]
        else:
            rnd = [self.end.x, self.end.y]
            nind = self.GetNearestListIndex(self.nodeList, rnd)
            nearestNode = self.nodeList[nind]
            theta = math.atan2(rnd[1] - nearestNode.y, rnd[0] - nearestNode.x)
            newNode = copy.deepcopy(nearestNode)
            newNode.x += self.expandDis * math.cos(theta)
            newNode.y += self.expandDis * math.sin(theta)
            newNode.parent = nind
        if not self.__CollisionCheck(newNode, self.obstacleList):
            continue
        self.nodeList.append(newNode)
        print("nNodelist:", len(self.nodeList))
        dx = newNode.x - self.end.x
        dy = newNode.y - self.end.y
        d = math.sqrt(dx * dx + dy * dy)
        if d <= self.expandDis:
            print("Goal!!")
            break
        if animation:
            self.DrawGraph(rnd)
        path = [[self.end.x, self.end.y]]
        lastIndex = len(self.nodeList) - 1
        while self.nodeList[lastIndex].parent is not None:
            node = self.nodeList[lastIndex]
            path.append([node.x, node.y])
            lastIndex = node.parent
        path.append([self.start.x, self.start.y])
        return path

def __CollisionCheck(self, node, obstacleList):
    for (ox, oy, size) in obstacleList:
        dx = ox - node.x
        dy = oy - node.y
        d = math.sqrt(dx * dx + dy * dy)
        if d <= size:
            return False  # collision
        return True  # safe

class Node():
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.parent = None

def main(goalx=45,goaly=70):
    print("start " + __file__)
    # ====Search Path with RRT====
    obstacleList = [
        (22, 66, 2),
        (14, 66, 2),
        (30, 66, 2),
        (5, 9, 2),
        (45, 9, 2)
    ]  # [x,y,size]
    # Set Initial parameters
    rrt = RRT(start=[5,25], goal=[goalx,goaly], randArea=[0, 50], obstacleList=obstacleList)
    path = rrt.Planning(animation=show_animation)
    # Draw final path
    if show_animation:  # pragma: no cove
        plt.grid(True)
        plt.plot([x for (x, y) in path], [y for (x, y) in path], '-r')#plots the trajectory
        plt.show()
if __name__ == '__main__':

    main()
